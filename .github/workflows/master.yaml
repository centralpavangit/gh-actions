name: first-workflow
on: [push, workflow_dispatch]
jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: welcome note
        run: echo "${{ toJSON(github) }}"
#       - name: checkout code
#         uses: actions/checkout@v3
#       - name: Check commit message for [major], [minor], or [patch]
#         run: |
#           commit_message=$(echo "${{ toJSON(github.event.head_commit.message) }}" | tr -d '\n')
#           if echo "$commit_message" | grep -q '\[major\]'; then
#            echo "Commit message contains [major]"
#            sed -i -r 's/^([0-9]+)\.([0-9]+)\.([0-9]+)$/\1.0.0/g' version.txt
#            version=$(cat version.txt)
#            IFS='.' read -r -a version_array <<< "$version"
#            major=${version_array[0]}
#            new_major=$((major+1))
#            new_version="${new_major}.0.0"
#            echo "$new_version" > version.txt
#            echo "Version number updated to $new_version"
#           elif echo "$commit_message" | grep -q '\[minor\]'; then
#            echo "Commit message contains [minor]"
#            sed -i -r 's/^([0-9]+)\.([0-9]+)\.([0-9]+)$/\1.\2.0/g' version.txt
#            version=$(cat version.txt)
#            IFS='.' read -r -a version_array <<< "$version"
#            minor=${version_array[1]}
#            new_minor=$((minor+1))
#            new_version="${version_array[0]}.${new_minor}.0"
#            echo "$new_version" > version.txt
#            echo "Version number updated to $new_version"
#           elif echo "$commit_message" | grep -q '\[patch\]'; then
#           echo "Commit message contains [patch]"
#           sed -i -r 's/^([0-9]+)\.([0-9]+)\.([0-9]+)$/\1.\2.0/g' version.txt
#           version=$(cat version.txt)
#           IFS='.' read -r -a version_array <<< "$version"
#           patch=${version_array[2]}
#           new_patch=$((patch+1))
#           new_version="${version_array[0]}.${version_array[1]}.${new_patch}"
#           echo "$new_version" > version.txt
#           echo "Version number updated to $new_version"
#           else
#            echo "Commit message does not contain [major], [minor], or [patch]"
#           fi
#           git config --global user.name "pavan"
#           git config --global user.email "mr.pavad@gmail.com"
#           git add .
#           git commit -m "version changed to $new_version"
#           git push 


#       - name: install dependencies
#         run: npm ci
#       - name: run tests
#         run: npm test
#   build:
#     needs: test
#     runs-on: ubuntu-latest
#     outputs:  
#        shell-file: ${{ steps.publish.outputs.scritp-file }}
#     steps:
#       - name: welcome note
#         run: echo "${{ toJSON(github.event) }}"
#       - name: checkout code
#         uses: actions/checkout@v3

#       - name: install dependencies
#         run: npm ci
#       - name: run tests
#         run: npm test
#       - name: npm build
#         run: npm run build    
#       - name: publish java file
#         id: publish
#         run: find dist/assets/*js -type f -execdir echo '::set-output name=script-file{}::' ';'
#       - name: upload artifacts
#         uses: actions/upload-artifact@v3
#         with:
#          name: dist-files
#          path: |
#           dist
        
#   deploy:
#     needs: build
#     runs-on: ubuntu-latest
#     steps:
#       - name: list files
#         run: ls
#       - name: get build artifact
#         uses: actions/download-artifact@v3
#         with:
#           name: dist-files
#       - name: output contents
#         run: ls
#       - name: read output
#         run: echo '${{ needs.build.outputs.shell-file }}'
          
#       - name: deploy
#         run: echo "deploying..."
        
         
